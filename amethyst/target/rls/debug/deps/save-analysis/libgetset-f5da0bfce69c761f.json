{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9","program":"C:\\Users\\Punkm\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","getset","--edition=2018","C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","proc-macro","--emit=dep-info,link","-C","prefer-dynamic","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=f5da0bfce69c761f","-C","extra-filename=-f5da0bfce69c761f","--out-dir","c:\\Users\\Punkm\\Projects\\Programming\\rust_learning\\amethyst\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Punkm\\Projects\\Programming\\rust_learning\\amethyst\\target\\rls\\debug\\deps","--extern","proc_macro2=c:\\Users\\Punkm\\Projects\\Programming\\rust_learning\\amethyst\\target\\rls\\debug\\deps\\libproc_macro2-8a77e0b7006b07e3.rlib","--extern","quote=c:\\Users\\Punkm\\Projects\\Programming\\rust_learning\\amethyst\\target\\rls\\debug\\deps\\libquote-8e01eb4ff6adbc8b.rlib","--extern","syn=c:\\Users\\Punkm\\Projects\\Programming\\rust_learning\\amethyst\\target\\rls\\debug\\deps\\libsyn-7282b043a7ed43b8.rlib","--extern","proc_macro","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Punkm\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Punkm\\Projects\\Programming\\rust_learning\\amethyst\\target\\rls\\debug\\deps\\getset-f5da0bfce69c761f.dll"},"prelude":{"crate_id":{"name":"getset","disambiguator":[10960156114261771214,17812788129012221089]},"crate_root":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src","external_crates":[{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[9313216841108481316,924443797430308437]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[235204689529430899,11195511058902687991]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8443630644245237509,966744638502353748]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13900139468171161186,1531802306738104785]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5240442222101950495,1297279504790020208]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[2443005202137729499,9185958358018941627]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15985227457147286552,10516973543605023258]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4222764532443259325,10183273613643052503]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1171194158452371475,10852610754819645916]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8741536135820378690,14206967751681147027]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[4062813797492812340,12507429432407858268]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[14499051738960611440,17566239002762474023]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":13,"id":{"name":"proc_macro","disambiguator":[10868761797083353167,13721266217715016836]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":14,"id":{"name":"syn","disambiguator":[84425677082965872,17173807089478663271]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":15,"id":{"name":"proc_macro2","disambiguator":[12238654198788569312,9577865975015566952]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":16,"id":{"name":"unicode_xid","disambiguator":[7229251187792718441,15240516695504349894]}},{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","num":17,"id":{"name":"quote","disambiguator":[8597977838751300426,7831964294501862593]}}],"span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":0,"byte_end":7617,"line_start":1,"line_end":302,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":0,"byte_end":7617,"line_start":1,"line_end":302,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":73}],"decl_id":null,"docs":"Getset, we're ready to go!","sig":null,"attributes":[{"value":"*\nGetset, we're ready to go!\n\nA procedural macro for generating the most basic getters and setters on fields.\n\nGetters are generated as `fn field(&self) -> &type`, while setters are generated as `fn field(&mut self, val: type)`.\n\nThese macros are not intended to be used on fields which require custom logic inside of their setters and getters. Just write your own in that case!\n\n```rust\nuse getset::{Getters, MutGetters, CopyGetters, Setters};\n\n#[derive(Getters, Setters, MutGetters, CopyGetters, Default)]\npub struct Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[get]\n    #[set]\n    #[get_mut]\n    private: T,\n\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[get_copy = \"pub\"]\n    #[set = \"pub\"]\n    #[get_mut = \"pub\"]\n    public: T,\n}\n\nfn main() {\n    let mut foo = Foo::default();\n    foo.set_private(1);\n    (*foo.private_mut()) += 1;\n    assert_eq!(*foo.private(), 2);\n}\n```\n\nThe above structure definition generates the following output with `cargo expand`.\n\n```rust,ignore\n#![feature(prelude_import)]\n#![no_std]\n#[prelude_import]\nuse ::std::prelude::v1::*;\n#[macro_use]\nextern crate std as std;\nuse getset::{Getters, MutGetters, CopyGetters, Setters};\npub struct Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[get]\n    #[set]\n    #[get_mut]\n    private: T,\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[get_copy = \"pub\"]\n    #[set = \"pub\"]\n    #[get_mut = \"pub\"]\n    public: T,\n}\nimpl<T> Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    fn private(&self) -> &T {\n        &self.private\n    }\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    pub fn public(&self) -> T {\n        self.public\n    }\n}\nimpl<T> Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    fn set_private(&mut self, val: T) -> &mut Self {\n        self.private = val;\n        self\n    }\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    pub fn set_public(&mut self, val: T) -> &mut Self {\n        self.public = val;\n        self\n    }\n}\nimpl<T> Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    fn private_mut(&mut self) -> &mut T {\n        &mut self.private\n    }\n    /// Doc comments are supported!\n    /// Multiline, even.\n    #[inline(always)]\n    pub fn public_mut(&mut self) -> &mut T {\n        &mut self.public\n    }\n}\n#[automatically_derived]\n#[allow(unused_qualifications)]\nimpl<T: ::core::default::Default> ::core::default::Default for Foo<T>\nwhere\n    T: Copy + Clone + Default,\n{\n    #[inline]\n    fn default() -> Foo<T> {\n        Foo {\n            private: ::core::default::Default::default(),\n            public: ::core::default::Default::default(),\n        }\n    }\n}\n```\n\nAttributes can be set on struct level for all fields in struct as well. Field level attributes take\nprecedence.\n\n```rust\n#[macro_use]\nextern crate getset;\n\nmod submodule {\n    #[derive(Getters, CopyGetters, Default)]\n    #[get_copy = \"pub\"] // By default add a pub getting for all fields.\n    pub struct Foo {\n        public: i32,\n        #[get_copy] // Override as private\n        private: i32,\n    }\n    fn demo() {\n        let mut foo = Foo::default();\n        foo.private();\n    }\n}\nfn main() {\n    let mut foo = submodule::Foo::default();\n    foo.public();\n}\n```\n\nFor some purposes, it's useful to have the `get_` prefix on the getters for\neither legacy of compatability reasons. It is done with `get-prefix`.\n\n```rust\n#[macro_use]\nextern crate getset;\n\n#[derive(Getters, Default)]\npub struct Foo {\n    #[get = \"pub with_prefix\"]\n    field: bool,\n}\n\nfn main() {\n    let mut foo = Foo::default();\n    let val = foo.get_field();\n}\n```\n*/","span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":0,"byte_end":3998,"line_start":1,"line_end":181,"column_start":1,"column_end":3}}]},{"kind":"Function","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":4346,"byte_end":4353,"line_start":197,"line_end":197,"column_start":8,"column_end":15},"name":"getters","qualname":"::getters","value":"pub fn getters(TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"proc_macro_derive(Getters, attributes(get, with_prefix))","span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":4279,"byte_end":4338,"line_start":196,"line_end":196,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":4899,"byte_end":4911,"line_start":215,"line_end":215,"column_start":8,"column_end":20},"name":"copy_getters","qualname":"::copy_getters","value":"pub fn copy_getters(TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"proc_macro_derive(CopyGetters, attributes(get_copy, with_prefix))","span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":4823,"byte_end":4891,"line_start":214,"line_end":214,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":5456,"byte_end":5467,"line_start":233,"line_end":233,"column_start":8,"column_end":19},"name":"mut_getters","qualname":"::mut_getters","value":"pub fn mut_getters(TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"proc_macro_derive(MutGetters, attributes(get_mut))","span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":5395,"byte_end":5448,"line_start":232,"line_end":232,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":6005,"byte_end":6012,"line_start":250,"line_end":250,"column_start":8,"column_end":15},"name":"setters","qualname":"::setters","value":"pub fn setters(TokenStream) -> TokenStream","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"proc_macro_derive(Setters, attributes(set))","span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\lib.rs","byte_start":5951,"byte_end":5997,"line_start":249,"line_end":249,"column_start":1,"column_end":47}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\generate.rs","byte_start":8030,"byte_end":8037,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\getset-0.0.9\\src\\generate.rs","byte_start":8030,"byte_end":8037,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}}]}