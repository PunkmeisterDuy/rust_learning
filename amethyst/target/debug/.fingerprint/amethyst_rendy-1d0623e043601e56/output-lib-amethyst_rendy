{"message":"You must specify at least one graphical backend feature: \"metal\", \"vulkan\", \"empty\"\n\"See the wiki article https://book.amethyst.rs/stable/appendices/c_feature_gates.html#graphics-features for more details.\"","code":null,"level":"error","spans":[{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\static_assertions-1.1.0\\src\\assert_cfg.rs","byte_start":1565,"byte_end":1586,"line_start":43,"line_end":43,"column_start":9,"column_end":30,"is_primary":true,"text":[{"text":"        compile_error!($msg);","highlight_start":9,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\amethyst_rendy-0.15.3\\src\\types.rs","byte_start":881,"byte_end":1196,"line_start":24,"line_end":27,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        static_assertions::assert_cfg!(","highlight_start":9,"highlight_end":40},{"text":"            any($(feature = $feature),*),","highlight_start":1,"highlight_end":42},{"text":"            concat!(\"You must specify at least one graphical backend feature: \", stringify!($($feature),* \"See the wiki article https://book.amethyst.rs/stable/appendices/c_feature_gates.html#graphics-features for more details.\"))","highlight_start":1,"highlight_end":231},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\amethyst_rendy-0.15.3\\src\\types.rs","byte_start":3938,"byte_end":4270,"line_start":112,"line_end":119,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"impl_backends!(","highlight_start":1,"highlight_end":16},{"text":"    // DirectX 12 is currently disabled because of incomplete gfx-hal support for it.","highlight_start":1,"highlight_end":86},{"text":"    // It will be re-enabled when it actually works.","highlight_start":1,"highlight_end":53},{"text":"    // Dx12, \"dx12\", rendy::dx12::Backend;","highlight_start":1,"highlight_end":43},{"text":"    Metal, \"metal\", rendy::metal::Backend;","highlight_start":1,"highlight_end":43},{"text":"    Vulkan, \"vulkan\", rendy::vulkan::Backend;","highlight_start":1,"highlight_end":46},{"text":"    Empty, \"empty\", rendy::empty::Backend;","highlight_start":1,"highlight_end":43},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_backends!","def_site_span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\amethyst_rendy-0.15.3\\src\\types.rs","byte_start":722,"byte_end":3139,"line_start":18,"line_end":91,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_backends {","highlight_start":1,"highlight_end":29},{"text":"    ($($variant:ident, $feature:literal, $backend:ty;)*) => {","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl_single_default!($([$feature, $backend]),*);","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        static_assertions::assert_cfg!(","highlight_start":1,"highlight_end":40},{"text":"            any($(feature = $feature),*),","highlight_start":1,"highlight_end":42},{"text":"            concat!(\"You must specify at least one graphical backend feature: \", stringify!($($feature),* \"See the wiki article https://book.amethyst.rs/stable/appendices/c_feature_gates.html#graphics-features for more details.\"))","highlight_start":1,"highlight_end":231},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Backend wrapper.","highlight_start":1,"highlight_end":29},{"text":"        #[derive(Debug)]","highlight_start":1,"highlight_end":25},{"text":"        pub enum BackendVariant {","highlight_start":1,"highlight_end":34},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                #[cfg(feature = $feature)]","highlight_start":1,"highlight_end":43},{"text":"                #[doc = \"Backend Variant\"]","highlight_start":1,"highlight_end":43},{"text":"                $variant,","highlight_start":1,"highlight_end":26},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Mesh wrapper.","highlight_start":1,"highlight_end":26},{"text":"        #[derive(Debug)]","highlight_start":1,"highlight_end":25},{"text":"        pub enum Mesh {","highlight_start":1,"highlight_end":24},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                #[cfg(feature = $feature)]","highlight_start":1,"highlight_end":43},{"text":"                #[doc = \"Mesh Variant\"]","highlight_start":1,"highlight_end":40},{"text":"                $variant(rendy::mesh::Mesh<$backend>),","highlight_start":1,"highlight_end":55},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Texture wrapper.","highlight_start":1,"highlight_end":29},{"text":"        #[derive(Debug)]","highlight_start":1,"highlight_end":25},{"text":"        pub enum Texture {","highlight_start":1,"highlight_end":27},{"text":"            $(","highlight_start":1,"highlight_end":15},{"text":"                #[cfg(feature = $feature)]","highlight_start":1,"highlight_end":43},{"text":"                #[doc = \"Texture Variant\"]","highlight_start":1,"highlight_end":43},{"text":"                $variant(rendy::texture::Texture<$backend>),","highlight_start":1,"highlight_end":61},{"text":"            )*","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            #[cfg(feature = $feature)]","highlight_start":1,"highlight_end":39},{"text":"            impl Backend for $backend {","highlight_start":1,"highlight_end":40},{"text":"                #[inline]","highlight_start":1,"highlight_end":26},{"text":"                #[allow(irrefutable_let_patterns)]","highlight_start":1,"highlight_end":51},{"text":"                fn unwrap_mesh(mesh: &Mesh) -> Option<&rendy::mesh::Mesh<Self>> {","highlight_start":1,"highlight_end":82},{"text":"                    if let Mesh::$variant(inner) = mesh {","highlight_start":1,"highlight_end":58},{"text":"                        Some(inner)","highlight_start":1,"highlight_end":36},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        None","highlight_start":1,"highlight_end":29},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                #[inline]","highlight_start":1,"highlight_end":26},{"text":"                #[allow(irrefutable_let_patterns)]","highlight_start":1,"highlight_end":51},{"text":"                fn unwrap_texture(texture: &Texture) -> Option<&rendy::texture::Texture<Self>> {","highlight_start":1,"highlight_end":97},{"text":"                    if let Texture::$variant(inner) = texture {","highlight_start":1,"highlight_end":64},{"text":"                        Some(inner)","highlight_start":1,"highlight_end":36},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        None","highlight_start":1,"highlight_end":29},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                #[inline]","highlight_start":1,"highlight_end":26},{"text":"                fn wrap_mesh(mesh: rendy::mesh::Mesh<Self>) -> Mesh {","highlight_start":1,"highlight_end":70},{"text":"                    Mesh::$variant(mesh)","highlight_start":1,"highlight_end":41},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                #[inline]","highlight_start":1,"highlight_end":26},{"text":"                fn wrap_texture(texture: rendy::texture::Texture<Self>) -> Texture {","highlight_start":1,"highlight_end":85},{"text":"                    Texture::$variant(texture)","highlight_start":1,"highlight_end":47},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"static_assertions::assert_cfg!","def_site_span":{"file_name":"C:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\static_assertions-1.1.0\\src\\assert_cfg.rs","byte_start":1445,"byte_end":1733,"line_start":39,"line_end":49,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! assert_cfg {","highlight_start":1,"highlight_end":1},{"text":"    () => {};","highlight_start":1,"highlight_end":1},{"text":"    ($($cfg:meta)+, $msg:expr $(,)?) => {","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($($cfg)+))]","highlight_start":1,"highlight_end":1},{"text":"        compile_error!($msg);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    ($($cfg:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($($cfg)*))]","highlight_start":1,"highlight_end":1},{"text":"        compile_error!(concat!(\"Cfg does not pass: \", stringify!($($cfg)*)));","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: You must specify at least one graphical backend feature: \"metal\", \"vulkan\", \"empty\"\n\"See the wiki article https://book.amethyst.rs/stable/appendices/c_feature_gates.html#graphics-features for more details.\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Punkm\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\amethyst_rendy-0.15.3\\src\\types.rs:112:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_backends!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // DirectX 12 is currently disabled because of incomplete gfx-hal support for it.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // It will be re-enabled when it actually works.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Dx12, \"dx12\", rendy::dx12::Backend;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Empty, \"empty\", rendy::empty::Backend;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
